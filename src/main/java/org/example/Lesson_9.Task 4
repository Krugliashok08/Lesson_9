package org.example;

import java.util.*;
import java.util.stream.Collectors;

public class Main {
    private enum Gender {MAN, WOMAN}

    private static class Student {
        private final String name;
        private final Integer age;
        private final Gender gender;

        public Student(String name, Integer age, Gender gender) {
            this.name = name;
            this.age = age;
            this.gender = gender;
        }

        public String getName() {
            return name;
        }

        public Integer getAge() {
            return age;
        }

        public Gender getGender(Gender man) {
            return gender;
        }

        @Override
        public String toString() {
            return "{" + "name='" + name + '\'' + ", age=" + age + ", gender=" + gender + '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Student)) return false;
            Student student = (Student) o;
            return Objects.equals(name, student.name) &&
                    Objects.equals(age, student.age) &&
                    Objects.equals(gender, student.gender);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name, age, gender);
        }
    }

    public static double AverageAgeOfMaleStudents(Collection<Student> students) {

        return students.stream()

                .filter(student -> student.getGender(Gender.MAN) == Gender.MAN)

                .mapToDouble(Student::getAge)

                .average()

                .orElse(0);

    }
    public static Collection<Student> getStudentsForMilitaryService(Collection<Student> students) {

        return students.stream()

                .filter(student -> student.getAge() >= 18 && student.getAge() <= 27 )

                .collect(Collectors.toList());

    }
    public static void main(String[] args) {

        Collection<Student> students = Arrays.asList(

                new Student("Дмитрий", 17, Gender.MAN),

                new Student("Максим", 20, Gender.MAN),

                new Student("Екатерина", 20, Gender.WOMAN),

                new Student("Михаил", 28, Gender.MAN)

        );

        double averageAgeOfMaleStudents = AverageAgeOfMaleStudents(students);

        System.out.println("Средний возраст студентов мужского пола: " + averageAgeOfMaleStudents);


        Collection<Student> studentsForMilitaryService = getStudentsForMilitaryService(students);

        System.out.println("Студенты призывного возраста:");

        studentsForMilitaryService.forEach(student -> System.out.println(student.getName() + " - " + student.getAge() + " years old"));


    }
}

